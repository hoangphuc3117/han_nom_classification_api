# Docker Auto-Build Makefile for Han Nom Classification API

# Variables
DOCKER_IMAGE_NAME = han-nom-classification-api
DOCKER_TAG = latest
DOCKER_DEV_TAG = dev
CONTAINER_NAME = han-nom-api
DEV_CONTAINER_NAME = han-nom-api-dev

# Colors for output
GREEN = \033[0;32m
YELLOW = \033[0;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help build build-dev run run-dev stop clean logs test docker-compose-up docker-compose-down rebuild

# Default target
help:
	@echo "$(GREEN)Han Nom Classification API Docker Commands$(NC)"
	@echo ""
	@echo "$(YELLOW)Building:$(NC)"
	@echo "  build          - Build production Docker image"
	@echo "  build-dev      - Build development Docker image"
	@echo "  rebuild        - Rebuild production image from scratch"
	@echo ""
	@echo "$(YELLOW)Running:$(NC)"
	@echo "  run            - Run production container"
	@echo "  run-dev        - Run development container with hot reload"
	@echo "  docker-compose-up   - Start services with docker-compose"
	@echo "  docker-compose-down - Stop services with docker-compose"
	@echo ""
	@echo "$(YELLOW)Management:$(NC)"
	@echo "  stop           - Stop all containers"
	@echo "  clean          - Remove containers and images"
	@echo "  logs           - Show container logs"
	@echo "  shell          - Open bash shell in running container"
	@echo "  test           - Run tests in container"
	@echo ""
	@echo "$(YELLOW)Utilities:$(NC)"
	@echo "  check-models   - Check if model files exist"
	@echo "  health         - Check container health"

# Build production image
build:
	@echo "$(GREEN)Building production Docker image...$(NC)"
	docker build -t $(DOCKER_IMAGE_NAME):$(DOCKER_TAG) .
	@echo "$(GREEN)Production image built successfully!$(NC)"

# Build development image
build-dev:
	@echo "$(GREEN)Building development Docker image...$(NC)"
	docker build -t $(DOCKER_IMAGE_NAME):$(DOCKER_DEV_TAG) -f Dockerfile.dev .
	@echo "$(GREEN)Development image built successfully!$(NC)"

# Rebuild production image from scratch
rebuild:
	@echo "$(GREEN)Rebuilding production image from scratch...$(NC)"
	docker build --no-cache -t $(DOCKER_IMAGE_NAME):$(DOCKER_TAG) .
	@echo "$(GREEN)Production image rebuilt successfully!$(NC)"

# Run production container
run: build
	@echo "$(GREEN)Starting production container...$(NC)"
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p 8000:8000 \
		-v $(PWD)/models:/app/models:ro \
		-e PYTHONPATH=/app \
		--restart unless-stopped \
		$(DOCKER_IMAGE_NAME):$(DOCKER_TAG)
	@echo "$(GREEN)Production container started! API available at http://localhost:8000$(NC)"

# Run development container
run-dev: build-dev
	@echo "$(GREEN)Starting development container with hot reload...$(NC)"
	docker run -d \
		--name $(DEV_CONTAINER_NAME) \
		-p 8001:8000 \
		-v $(PWD):/app \
		-v $(PWD)/models:/app/models:ro \
		-e PYTHONPATH=/app \
		$(DOCKER_IMAGE_NAME):$(DOCKER_DEV_TAG)
	@echo "$(GREEN)Development container started! API available at http://localhost:8001$(NC)"

# Start services with docker-compose
docker-compose-up:
	@echo "$(GREEN)Starting services with docker-compose...$(NC)"
	docker-compose up -d
	@echo "$(GREEN)Services started! API available at http://localhost:8000$(NC)"

# Start development services with docker-compose
docker-compose-dev:
	@echo "$(GREEN)Starting development services with docker-compose...$(NC)"
	docker-compose --profile dev up -d
	@echo "$(GREEN)Development services started! API available at http://localhost:8001$(NC)"

# Start with nginx
docker-compose-prod:
	@echo "$(GREEN)Starting production services with nginx...$(NC)"
	docker-compose --profile production up -d
	@echo "$(GREEN)Production services started! API available at http://localhost:80$(NC)"

# Stop services with docker-compose
docker-compose-down:
	@echo "$(YELLOW)Stopping docker-compose services...$(NC)"
	docker-compose down

# Stop containers
stop:
	@echo "$(YELLOW)Stopping containers...$(NC)"
	-docker stop $(CONTAINER_NAME) $(DEV_CONTAINER_NAME)
	-docker rm $(CONTAINER_NAME) $(DEV_CONTAINER_NAME)

# Clean up containers and images
clean: stop
	@echo "$(RED)Cleaning up containers and images...$(NC)"
	-docker rmi $(DOCKER_IMAGE_NAME):$(DOCKER_TAG)
	-docker rmi $(DOCKER_IMAGE_NAME):$(DOCKER_DEV_TAG)
	-docker system prune -f
	@echo "$(GREEN)Cleanup completed!$(NC)"

# Show container logs
logs:
	@echo "$(GREEN)Showing container logs...$(NC)"
	-docker logs -f $(CONTAINER_NAME) 2>/dev/null || docker logs -f $(DEV_CONTAINER_NAME)

# Open shell in running container
shell:
	@echo "$(GREEN)Opening shell in running container...$(NC)"
	-docker exec -it $(CONTAINER_NAME) /bin/bash 2>/dev/null || docker exec -it $(DEV_CONTAINER_NAME) /bin/bash

# Run tests in container
test: build-dev
	@echo "$(GREEN)Running tests in container...$(NC)"
	docker run --rm \
		-v $(PWD):/app \
		-e PYTHONPATH=/app \
		$(DOCKER_IMAGE_NAME):$(DOCKER_DEV_TAG) \
		pytest tests/ -v

# Check if model files exist
check-models:
	@echo "$(GREEN)Checking model files...$(NC)"
	@if [ -d "./models" ]; then \
		echo "$(GREEN)✓ models directory exists$(NC)"; \
		find ./models -name "*.pdiparams" -o -name "*.json" -o -name "*.yml" | head -10; \
	else \
		echo "$(RED)✗ models directory not found$(NC)"; \
		echo "Please ensure model files are in the ./models directory"; \
	fi

# Check container health
health:
	@echo "$(GREEN)Checking container health...$(NC)"
	-docker exec $(CONTAINER_NAME) curl -f http://localhost:8000/docs 2>/dev/null && echo "$(GREEN)✓ Production container is healthy$(NC)" || echo "$(RED)✗ Production container is not healthy$(NC)"
	-docker exec $(DEV_CONTAINER_NAME) curl -f http://localhost:8000/docs 2>/dev/null && echo "$(GREEN)✓ Development container is healthy$(NC)" || echo "$(RED)✗ Development container is not healthy$(NC)"

# Quick development setup
dev-setup: build-dev run-dev
	@echo "$(GREEN)Development environment is ready!$(NC)"
	@echo "API Documentation: http://localhost:8001/docs"

# Quick production setup
prod-setup: build run
	@echo "$(GREEN)Production environment is ready!$(NC)"
	@echo "API Documentation: http://localhost:8000/docs"